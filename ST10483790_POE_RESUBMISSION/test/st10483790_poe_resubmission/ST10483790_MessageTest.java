
package st10483790_poe_resubmission;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


public class ST10483790_MessageTest {
    
   
  //Test checks that: Message content is within the allowed 250-character limit
  @Test
    void messageLengthSuccess() {
        String msg = "Short message";
        assertEquals("Message ready to send.", ST10483790_Message.validateMessageLength(msg));
    }

    //Test checks that: Message content exceeds 250 characters
    @Test
    void messageLengthFailure() {
        String msg = "a".repeat(260);   // 260 chars (10 too many)
        assertEquals("Message exceeds 250 characters by 10, please reduce size.", ST10483790_Message.validateMessageLength(msg));
    }

  //Test checks for: Valid international-format cell phone number starting with +27.
  @Test
    void cellNumberSuccess() {
        String num = "+27831234567";
        assertEquals("Cell phone number successfully captured.", ST10483790_Message.validateCellNumber(num));
    }

    //Test checks for: Invalid phone number (missing + and country code)
    @Test
    void cellNumberFailure() {
        String num = "0831234567";    // missing “+” & country code
        assertEquals(
            "Cell phone number is incorrectly formatted or does not contain an international code. Please correct the number and try again.",
            ST10483790_Message.validateCellNumber(num)
        );
    }

  //Test checks that: Message hash is generated by converting content to uppercase and adding prefix
  @Test
    void messageHashCorrect() {
        ST10483790_Message msg =  new ST10483790_Message("+27831234567", "HITONIGHT");
         assertEquals("00:0:HITONIGHT", msg.getMessageHash());
    }

  //Test checks that:  Message ID is created and follows expected format
  @Test
    void messageIDIsCreated() {
        ST10483790_Message msg = new ST10483790_Message("+27831234567", "Hello");
         // 1) wording check
        assertTrue(msg.getDisplayMessageID().startsWith("Message ID generated: "));
        // 2) eight-digit numeric ID
        assertEquals(8, msg.getMessageID().length());
        assertTrue(msg.getMessageID().matches("\\d{8}"));
    }

   //Test checks that: handleUserSelection(1) should return a success message for sending
   @Test
    void handleSend()     
      { assertEquals("Message successfully sent.", ST10483790_Message.handleUserSelection(1)); }

    //Test checks that: handleUserSelection(2) should prompt for deletion
    @Test
    void handleDisregard() 
      { assertEquals("Press 0 to delete message.", ST10483790_Message.handleUserSelection(2)); }

    //Test checks that: handleUserSelection(3) should return a success message for storing
    @Test
    void handleStore()    
      { assertEquals("Message successfully stored.", ST10483790_Message.handleUserSelection(3)); }

    
}
